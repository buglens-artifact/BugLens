filename,bug_id,bisection_result,commit_time,bad_opt_level,passes_to_enable_vector,passes_to_enable
95,llvmorg3.1.0#mis_compile#1#None,,0,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
59,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"fc8d9ee Implement rdar://6295824 and PR6724 with two tiny changes that can have a big effect :).  The first is to enable the iterative SCC passmanager juice that kicks in when the scc passmgr detects that a function pass has devirtualized a call.  In this case, it will rerun all the passes it manages on the SCC, up to the iteration count limit (4). This is useful because a function pass may devirualize a call, and we want the inliner to inline it, or pruneeh to infer stuff about it, etc.",1272676556,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
92,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"1dc98b4 completely rewrite the memory promotion algorithm in LICM. Among other things, this uses SSAUpdater instead of PromoteMemToReg.",1283064232,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
66,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,licm,loop-deletion,loop-rotate,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
104,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,12dacdd teach basicaa that A[i] != A[i+1].,1259252290,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
50,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
68,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,631c5b2 teach GetLinearExpression to be a bit more aggressive.,1259254801,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
103,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,"9f2bca0 Experiments show that we can safely increase our unrolling threshold without unduly impacting code size, particularly since unrolling is not enabled at -Os.",1280946766,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
57,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,a7d81ab X86-64: pass/return structs of float/int as float/i32 instead of double/i64 to make the code generated for ABI cleaner.  Passing in the low part of a double is the same as passing in a float.,1277755019,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
32,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
35,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,bda59bd Revert r110396 to fix buildbots.,1281054215,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
102,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,631c5b2 teach GetLinearExpression to be a bit more aggressive.,1259254801,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
69,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
56,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
105,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
58,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
67,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"b92156d Fold the ShrinkDemandedOps pass into the regular DAGCombiner pass, which is faster, simpler, and less surprising.",1276823121,-Os,,
93,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
94,llvmorg3.1.0#mis_compile#1#None,e99c110 implement rdar://7346691 by codegen'ing struct/array initializers to a memset or a memcpy from a global when possible.,1260001331,-Os,"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","scalarrepl,sccp,simplify-libcalls,strip-dead-prototypes,"
60,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,ff0e2a3 Rework the ConstStructBuilder code to emit missing initializer elements with explicit zero values instead of with tail padding. On an example like this:,1271182579,-O2,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
33,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
20,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"20b551a IRgen: Always use i8 arrays to access union bit-fields. This is ugly, but matches how we currently handle structs, and this correctly handles -fno-bitfield-type-align.",1271785950,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
18,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
27,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
11,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
29,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"d697deb turn IPSCCP back on by default, try #3 or 4? Woo.",1257276913,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
16,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"fc8d9ee Implement rdar://6295824 and PR6724 with two tiny changes that can have a big effect :).  The first is to enable the iterative SCC passmanager juice that kicks in when the scc passmgr detects that a function pass has devirtualized a call.  In this case, it will rerun all the passes it manages on the SCC, up to the iteration count limit (4). This is useful because a function pass may devirualize a call, and we want the inliner to inline it, or pruneeh to infer stuff about it, etc.",1272676556,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
89,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"b92156d Fold the ShrinkDemandedOps pass into the regular DAGCombiner pass, which is faster, simpler, and less surprising.",1276823121,-Os,,
45,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
87,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,12dacdd teach basicaa that A[i] != A[i+1].,1259252290,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
80,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"98748c0 Teach instcombine's sext elimination logic to be more aggressive. Previously, instcombine would only promote an expression tree to the larger type if doing so eliminated two casts.  This is because a need to manually do the sign extend after the promoted expression tree with two shifts.  Now, we keep track of whether the result of the computation is going to be properly sign extended already.  If so, we can unconditionally promote the expression, which allows us to zap more sext's.",1262742981,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
6,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
17,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
1,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
10,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,6c1395f Enhance the shift propagator to handle the case when you have:,1282949624,-Os,"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","instcombine,"
26,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
8,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"b92156d Fold the ShrinkDemandedOps pass into the regular DAGCombiner pass, which is faster, simpler, and less surprising.",1276823121,-Os,,
21,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
75,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,12dacdd teach basicaa that A[i] != A[i+1].,1259252290,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
81,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,113fb54 Increase inliner thresholds by 25.,1265309300,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
44,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e99c110 implement rdar://7346691 by codegen'ing struct/array initializers to a memset or a memcpy from a global when possible.,1260001331,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
43,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globaldce,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
38,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,6c1395f Enhance the shift propagator to handle the case when you have:,1282949624,-Os,"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","instcombine,"
36,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,6c1395f Enhance the shift propagator to handle the case when you have:,1282949624,-Os,"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","instcombine,"
65,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"7a5b56a Change the other half of aliasGEP (which handles GEP differencing) to use DecomposeGEPExpression.  This dramatically simplifies and shrinks the code by eliminating the horrible CheckGEPInstructions method, fixes a miscompilation (@test3) and makes the code more aggressive.  In particular, we now handle the @test4 case, which is reduced from the SmallPtrSet constructor.  Missing this caused us to emit a variable length memset instead of a fixed size one.",1259201854,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
62,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
96,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,"b92156d Fold the ShrinkDemandedOps pass into the regular DAGCombiner pass, which is faster, simpler, and less surprising.",1276823121,-Os,,
109,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,631c5b2 teach GetLinearExpression to be a bit more aggressive.,1259254801,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
100,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
98,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,"efd7f9c Reorder the contents of various getAnalysisUsage functions, eliminating a redundant loopsimplify run from the default -O2 sequence.",1279303125,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,scalarrepl,"
53,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,631c5b2 teach GetLinearExpression to be a bit more aggressive.,1259254801,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
30,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
99,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,2f0354e add support for recursive phi translation and phi translation of add with immediate.  This allows us to optimize this function:,1259349091,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
55,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"b92156d Fold the ShrinkDemandedOps pass into the regular DAGCombiner pass, which is faster, simpler, and less surprising.",1276823121,-Os,,
97,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
108,llvmorg2.9.0#mis_compile#2bb40357079635058343743863f4d6be51501f51_726003e79d86d25cd44eee1e32ca65e3d440d843#None,631c5b2 teach GetLinearExpression to be a bit more aggressive.,1259254801,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
63,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e697a6f Constant fold x == undef to undef.,1277760607,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
90,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"7a5b56a Change the other half of aliasGEP (which handles GEP differencing) to use DecomposeGEPExpression.  This dramatically simplifies and shrinks the code by eliminating the horrible CheckGEPInstructions method, fixes a miscompilation (@test3) and makes the code more aggressive.  In particular, we now handle the @test4 case, which is reduced from the SmallPtrSet constructor.  Missing this caused us to emit a variable length memset instead of a fixed size one.",1259201854,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
46,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"b92156d Fold the ShrinkDemandedOps pass into the regular DAGCombiner pass, which is faster, simpler, and less surprising.",1276823121,-Os,,
79,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,12dacdd teach basicaa that A[i] != A[i+1].,1259252290,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
41,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,a7d81ab X86-64: pass/return structs of float/int as float/i32 instead of double/i64 to make the code generated for ABI cleaner.  Passing in the low part of a double is the same as passing in a float.,1277755019,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,strip-dead-prototypes,tailcallelim,verify,"
83,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,631c5b2 teach GetLinearExpression to be a bit more aggressive.,1259254801,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
77,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"1dc98b4 completely rewrite the memory promotion algorithm in LICM. Among other things, this uses SSAUpdater instead of PromoteMemToReg.",1283064232,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
84,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,113fb54 Increase inliner thresholds by 25.,1265309300,-Os,,
24,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
4,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"20b551a IRgen: Always use i8 arrays to access union bit-fields. This is ugly, but matches how we currently handle structs, and this correctly handles -fno-bitfield-type-align.",1271785950,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
15,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
3,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
85,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"7a5b56a Change the other half of aliasGEP (which handles GEP differencing) to use DecomposeGEPExpression.  This dramatically simplifies and shrinks the code by eliminating the horrible CheckGEPInstructions method, fixes a miscompilation (@test3) and makes the code more aggressive.  In particular, we now handle the @test4 case, which is reduced from the SmallPtrSet constructor.  Missing this caused us to emit a variable length memset instead of a fixed size one.",1259201854,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
71,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,1bf7ff7 Implement PR1143 (at -m64) by making basicaa look through extensions.  We previously already handled it at -m32 because there were no i32->i64 extensions for addressing.,1259261613,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
125,7a05864b489235992f6f98b1a2ac500d61222cdb_b91b3f88adcd0fe3ee603f032a141d1229e3c3bb,"62a84ea Generalize SROA to allow the first index of a GEP to be non-zero.  Add a missing check that an array reference doesn't go past the end of the array, and remove some redundant checks for in-bound array and vector references that are no longer needed.",1261465034,-Os,"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","scalarrepl,sccp,"
76,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"1dc98b4 completely rewrite the memory promotion algorithm in LICM. Among other things, this uses SSAUpdater instead of PromoteMemToReg.",1283064232,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-rotate,"
40,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
78,llvmorg2.9.0#mis_compile#55cf2ed148c10dd9247bc01e767f0e6904a7b389_309b4c49e44b3878774b15c9d11ca7d831e2905f#None,"b92156d Fold the ShrinkDemandedOps pass into the regular DAGCombiner pass, which is faster, simpler, and less surprising.",1276823121,-Os,,
2,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
13,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,"fc8d9ee Implement rdar://6295824 and PR6724 with two tiny changes that can have a big effect :).  The first is to enable the iterative SCC passmanager juice that kicks in when the scc passmgr detects that a function pass has devirtualized a call.  In this case, it will rerun all the passes it manages on the SCC, up to the iteration count limit (4). This is useful because a function pass may devirualize a call, and we want the inliner to inline it, or pruneeh to infer stuff about it, etc.",1272676556,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
5,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,6c1395f Enhance the shift propagator to handle the case when you have:,1282949624,-Os,"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","instcombine,"
14,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,e35e6f0 Teach ConstantFolding to do a better job when folding gep(bitcast).,1259530855,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
22,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,631c5b2 teach GetLinearExpression to be a bit more aggressive.,1259254801,-O3,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,constmerge,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,globalopt,gvn,indvars,inline,instcombine,ipsccp,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unroll,loop-unswitch,loops,loopsimplify,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
25,llvmorg2.8.0#mis_compile#49d15b959ea449d891f4204914bdcefe4daf79fc_7a24210ebdcefc1446369ec98f4209a93353335e#None,6c1395f Enhance the shift propagator to handle the case when you have:,1282949624,-Os,"0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0","adce,basiccg,correlated-propagation,deadargelim,deadtypeelim,domfrontier,domtree,dse,functionattrs,globalopt,indvars,instcombine,iv-users,jump-threading,lazy-value-info,lcssa,licm,loop-deletion,loop-rotate,loop-unswitch,loops,loopsimplify,mem2reg,memcpyopt,memdep,preverify,print-used-types,prune-eh,reassociate,scalar-evolution,scalarrepl,sccp,simplify-libcalls,simplifycfg,strip-dead-prototypes,tailcallelim,verify,"
